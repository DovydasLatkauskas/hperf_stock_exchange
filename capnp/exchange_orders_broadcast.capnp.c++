// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: exchange_orders_broadcast.capnp

#include "exchange_orders_broadcast.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<53> b_dbf5e2fabdc4a2b8 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    184, 162, 196, 189, 250, 226, 245, 219,
     32,   0,   0,   0,   1,   0,   1,   0,
    253,  47,  34,   7,  13, 144, 216, 238,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     22,   0,   0,   0, 104,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120,  99, 104,  97, 110, 103, 101,
     95, 111, 114, 100, 101, 114, 115,  95,
     98, 114, 111,  97, 100,  99,  97, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     66, 117, 121,  79, 114, 100, 101, 114,
     80, 117,  98, 108, 105,  99,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    111, 114, 100, 101, 114,  65, 109, 111,
    117, 110, 116,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 105, 116,  80, 114, 105,  99,
    101,  67, 101, 110, 116, 115,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbf5e2fabdc4a2b8 = b_dbf5e2fabdc4a2b8.words;
#if !CAPNP_LITE
static const uint16_t m_dbf5e2fabdc4a2b8[] = {0, 1};
static const uint16_t i_dbf5e2fabdc4a2b8[] = {0, 1};
const ::capnp::_::RawSchema s_dbf5e2fabdc4a2b8 = {
  0xdbf5e2fabdc4a2b8, b_dbf5e2fabdc4a2b8.words, 53, nullptr, m_dbf5e2fabdc4a2b8,
  0, 2, i_dbf5e2fabdc4a2b8, nullptr, nullptr, { &s_dbf5e2fabdc4a2b8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_d2b19807bf57a53b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     59, 165,  87, 191,   7, 152, 177, 210,
     32,   0,   0,   0,   1,   0,   1,   0,
    253,  47,  34,   7,  13, 144, 216, 238,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106,   0,   0,   0, 189,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120,  99, 104,  97, 110, 103, 101,
     95, 111, 114, 100, 101, 114, 115,  95,
     98, 114, 111,  97, 100,  99,  97, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     83, 101, 108, 108,  79, 114, 100, 101,
    114,  80, 117,  98, 108, 105,  99,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    111, 114, 100, 101, 114,  65, 109, 111,
    117, 110, 116,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 105, 116,  80, 114, 105,  99,
    101,  67, 101, 110, 116, 115,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d2b19807bf57a53b = b_d2b19807bf57a53b.words;
#if !CAPNP_LITE
static const uint16_t m_d2b19807bf57a53b[] = {0, 1};
static const uint16_t i_d2b19807bf57a53b[] = {0, 1};
const ::capnp::_::RawSchema s_d2b19807bf57a53b = {
  0xd2b19807bf57a53b, b_d2b19807bf57a53b.words, 53, nullptr, m_d2b19807bf57a53b,
  0, 2, i_d2b19807bf57a53b, nullptr, nullptr, { &s_d2b19807bf57a53b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_f590bba94ed71e26 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     38,  30, 215,  78, 169, 187, 144, 245,
     32,   0,   0,   0,   1,   0,   0,   0,
    253,  47,  34,   7,  13, 144, 216, 238,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    191,   0,   0,   0,  71,   1,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120,  99, 104,  97, 110, 103, 101,
     95, 111, 114, 100, 101, 114, 115,  95,
     98, 114, 111,  97, 100,  99,  97, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     83, 116, 111,  99, 107,  73, 100,  79,
    114, 100, 101, 114,  76, 105, 115, 116,
    115,  84, 117, 112, 108, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 111,  99, 107,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 117, 121,  79, 114, 100, 101, 114,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    184, 162, 196, 189, 250, 226, 245, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 108, 108,  79, 114, 100, 101,
    114, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     59, 165,  87, 191,   7, 152, 177, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f590bba94ed71e26 = b_f590bba94ed71e26.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f590bba94ed71e26[] = {
  &s_d2b19807bf57a53b,
  &s_dbf5e2fabdc4a2b8,
};
static const uint16_t m_f590bba94ed71e26[] = {1, 2, 0};
static const uint16_t i_f590bba94ed71e26[] = {0, 1, 2};
const ::capnp::_::RawSchema s_f590bba94ed71e26 = {
  0xf590bba94ed71e26, b_f590bba94ed71e26.words, 77, d_f590bba94ed71e26, m_f590bba94ed71e26,
  2, 3, i_f590bba94ed71e26, nullptr, nullptr, { &s_f590bba94ed71e26, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_db5096d070fbbd98 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    152, 189, 251, 112, 208, 150,  80, 219,
     32,   0,   0,   0,   1,   0,   0,   0,
    253,  47,  34,   7,  13, 144, 216, 238,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   1,   0,   0, 144,   1,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120,  99, 104,  97, 110, 103, 101,
     95, 111, 114, 100, 101, 114, 115,  95,
     98, 114, 111,  97, 100,  99,  97, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     66, 114, 111,  97, 100,  99,  97, 115,
    116,  83, 116, 114, 117,  99, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    111, 114, 100, 101, 114, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     38,  30, 215,  78, 169, 187, 144, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_db5096d070fbbd98 = b_db5096d070fbbd98.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_db5096d070fbbd98[] = {
  &s_f590bba94ed71e26,
};
static const uint16_t m_db5096d070fbbd98[] = {0};
static const uint16_t i_db5096d070fbbd98[] = {0};
const ::capnp::_::RawSchema s_db5096d070fbbd98 = {
  0xdb5096d070fbbd98, b_db5096d070fbbd98.words, 40, d_db5096d070fbbd98, m_db5096d070fbbd98,
  1, 1, i_db5096d070fbbd98, nullptr, nullptr, { &s_db5096d070fbbd98, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// BuyOrderPublic
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BuyOrderPublic::_capnpPrivate::dataWordSize;
constexpr uint16_t BuyOrderPublic::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BuyOrderPublic::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BuyOrderPublic::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// SellOrderPublic
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t SellOrderPublic::_capnpPrivate::dataWordSize;
constexpr uint16_t SellOrderPublic::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SellOrderPublic::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SellOrderPublic::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// StockIdOrderListsTuple
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t StockIdOrderListsTuple::_capnpPrivate::dataWordSize;
constexpr uint16_t StockIdOrderListsTuple::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind StockIdOrderListsTuple::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StockIdOrderListsTuple::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BroadcastStruct
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BroadcastStruct::_capnpPrivate::dataWordSize;
constexpr uint16_t BroadcastStruct::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BroadcastStruct::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BroadcastStruct::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



