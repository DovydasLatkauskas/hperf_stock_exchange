// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: network_requests.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1001000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d3567a375bac1184);
CAPNP_DECLARE_SCHEMA(ff74f4657d4dc47f);
enum class OrderType_ff74f4657d4dc47f: uint16_t {
  BUY,
  SELL,
};
CAPNP_DECLARE_ENUM(OrderType, ff74f4657d4dc47f);
CAPNP_DECLARE_SCHEMA(df7327cd74587253);
CAPNP_DECLARE_SCHEMA(834fff34f4f64c61);

}  // namespace schemas
}  // namespace capnp


struct MakeOrderRequest {
  MakeOrderRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3567a375bac1184, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::OrderType_ff74f4657d4dc47f OrderType;

struct CancelOrderRequest {
  CancelOrderRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(df7327cd74587253, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NetworkRequest {
  NetworkRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MAKE_ORDER_REQUEST,
    CANCEL_ORDER_REQUEST,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(834fff34f4f64c61, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class MakeOrderRequest::Reader {
public:
  typedef MakeOrderRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getRequesterId() const;

  inline bool hasStockId() const;
  inline  ::capnp::Text::Reader getStockId() const;

  inline  ::int32_t getOrderAmount() const;

  inline  ::int32_t getUnitPriceCents() const;

  inline  ::OrderType getOrderType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MakeOrderRequest::Builder {
public:
  typedef MakeOrderRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getRequesterId();
  inline void setRequesterId( ::int32_t value);

  inline bool hasStockId();
  inline  ::capnp::Text::Builder getStockId();
  inline void setStockId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStockId(unsigned int size);
  inline void adoptStockId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStockId();

  inline  ::int32_t getOrderAmount();
  inline void setOrderAmount( ::int32_t value);

  inline  ::int32_t getUnitPriceCents();
  inline void setUnitPriceCents( ::int32_t value);

  inline  ::OrderType getOrderType();
  inline void setOrderType( ::OrderType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MakeOrderRequest::Pipeline {
public:
  typedef MakeOrderRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CancelOrderRequest::Reader {
public:
  typedef CancelOrderRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getRequesterId() const;

  inline bool hasStockId() const;
  inline  ::capnp::Text::Reader getStockId() const;

  inline  ::OrderType getOrderType() const;

  inline bool hasCancelOrderId() const;
  inline  ::capnp::Data::Reader getCancelOrderId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CancelOrderRequest::Builder {
public:
  typedef CancelOrderRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getRequesterId();
  inline void setRequesterId( ::int32_t value);

  inline bool hasStockId();
  inline  ::capnp::Text::Builder getStockId();
  inline void setStockId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStockId(unsigned int size);
  inline void adoptStockId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStockId();

  inline  ::OrderType getOrderType();
  inline void setOrderType( ::OrderType value);

  inline bool hasCancelOrderId();
  inline  ::capnp::Data::Builder getCancelOrderId();
  inline void setCancelOrderId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initCancelOrderId(unsigned int size);
  inline void adoptCancelOrderId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownCancelOrderId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CancelOrderRequest::Pipeline {
public:
  typedef CancelOrderRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NetworkRequest::Reader {
public:
  typedef NetworkRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMakeOrderRequest() const;
  inline bool hasMakeOrderRequest() const;
  inline  ::MakeOrderRequest::Reader getMakeOrderRequest() const;

  inline bool isCancelOrderRequest() const;
  inline bool hasCancelOrderRequest() const;
  inline  ::CancelOrderRequest::Reader getCancelOrderRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NetworkRequest::Builder {
public:
  typedef NetworkRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMakeOrderRequest();
  inline bool hasMakeOrderRequest();
  inline  ::MakeOrderRequest::Builder getMakeOrderRequest();
  inline void setMakeOrderRequest( ::MakeOrderRequest::Reader value);
  inline  ::MakeOrderRequest::Builder initMakeOrderRequest();
  inline void adoptMakeOrderRequest(::capnp::Orphan< ::MakeOrderRequest>&& value);
  inline ::capnp::Orphan< ::MakeOrderRequest> disownMakeOrderRequest();

  inline bool isCancelOrderRequest();
  inline bool hasCancelOrderRequest();
  inline  ::CancelOrderRequest::Builder getCancelOrderRequest();
  inline void setCancelOrderRequest( ::CancelOrderRequest::Reader value);
  inline  ::CancelOrderRequest::Builder initCancelOrderRequest();
  inline void adoptCancelOrderRequest(::capnp::Orphan< ::CancelOrderRequest>&& value);
  inline ::capnp::Orphan< ::CancelOrderRequest> disownCancelOrderRequest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NetworkRequest::Pipeline {
public:
  typedef NetworkRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t MakeOrderRequest::Reader::getRequesterId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t MakeOrderRequest::Builder::getRequesterId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MakeOrderRequest::Builder::setRequesterId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MakeOrderRequest::Reader::hasStockId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MakeOrderRequest::Builder::hasStockId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MakeOrderRequest::Reader::getStockId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MakeOrderRequest::Builder::getStockId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MakeOrderRequest::Builder::setStockId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MakeOrderRequest::Builder::initStockId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MakeOrderRequest::Builder::adoptStockId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MakeOrderRequest::Builder::disownStockId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t MakeOrderRequest::Reader::getOrderAmount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t MakeOrderRequest::Builder::getOrderAmount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MakeOrderRequest::Builder::setOrderAmount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MakeOrderRequest::Reader::getUnitPriceCents() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t MakeOrderRequest::Builder::getUnitPriceCents() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MakeOrderRequest::Builder::setUnitPriceCents( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::OrderType MakeOrderRequest::Reader::getOrderType() const {
  return _reader.getDataField< ::OrderType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::OrderType MakeOrderRequest::Builder::getOrderType() {
  return _builder.getDataField< ::OrderType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void MakeOrderRequest::Builder::setOrderType( ::OrderType value) {
  _builder.setDataField< ::OrderType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CancelOrderRequest::Reader::getRequesterId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CancelOrderRequest::Builder::getRequesterId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CancelOrderRequest::Builder::setRequesterId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CancelOrderRequest::Reader::hasStockId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CancelOrderRequest::Builder::hasStockId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CancelOrderRequest::Reader::getStockId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CancelOrderRequest::Builder::getStockId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CancelOrderRequest::Builder::setStockId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CancelOrderRequest::Builder::initStockId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CancelOrderRequest::Builder::adoptStockId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CancelOrderRequest::Builder::disownStockId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::OrderType CancelOrderRequest::Reader::getOrderType() const {
  return _reader.getDataField< ::OrderType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::OrderType CancelOrderRequest::Builder::getOrderType() {
  return _builder.getDataField< ::OrderType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CancelOrderRequest::Builder::setOrderType( ::OrderType value) {
  _builder.setDataField< ::OrderType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CancelOrderRequest::Reader::hasCancelOrderId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CancelOrderRequest::Builder::hasCancelOrderId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CancelOrderRequest::Reader::getCancelOrderId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CancelOrderRequest::Builder::getCancelOrderId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CancelOrderRequest::Builder::setCancelOrderId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CancelOrderRequest::Builder::initCancelOrderId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CancelOrderRequest::Builder::adoptCancelOrderId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CancelOrderRequest::Builder::disownCancelOrderId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::NetworkRequest::Which NetworkRequest::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::NetworkRequest::Which NetworkRequest::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NetworkRequest::Reader::isMakeOrderRequest() const {
  return which() == NetworkRequest::MAKE_ORDER_REQUEST;
}
inline bool NetworkRequest::Builder::isMakeOrderRequest() {
  return which() == NetworkRequest::MAKE_ORDER_REQUEST;
}
inline bool NetworkRequest::Reader::hasMakeOrderRequest() const {
  if (which() != NetworkRequest::MAKE_ORDER_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NetworkRequest::Builder::hasMakeOrderRequest() {
  if (which() != NetworkRequest::MAKE_ORDER_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::MakeOrderRequest::Reader NetworkRequest::Reader::getMakeOrderRequest() const {
  KJ_IREQUIRE((which() == NetworkRequest::MAKE_ORDER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::MakeOrderRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::MakeOrderRequest::Builder NetworkRequest::Builder::getMakeOrderRequest() {
  KJ_IREQUIRE((which() == NetworkRequest::MAKE_ORDER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::MakeOrderRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NetworkRequest::Builder::setMakeOrderRequest( ::MakeOrderRequest::Reader value) {
  _builder.setDataField<NetworkRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, NetworkRequest::MAKE_ORDER_REQUEST);
  ::capnp::_::PointerHelpers< ::MakeOrderRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::MakeOrderRequest::Builder NetworkRequest::Builder::initMakeOrderRequest() {
  _builder.setDataField<NetworkRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, NetworkRequest::MAKE_ORDER_REQUEST);
  return ::capnp::_::PointerHelpers< ::MakeOrderRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NetworkRequest::Builder::adoptMakeOrderRequest(
    ::capnp::Orphan< ::MakeOrderRequest>&& value) {
  _builder.setDataField<NetworkRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, NetworkRequest::MAKE_ORDER_REQUEST);
  ::capnp::_::PointerHelpers< ::MakeOrderRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::MakeOrderRequest> NetworkRequest::Builder::disownMakeOrderRequest() {
  KJ_IREQUIRE((which() == NetworkRequest::MAKE_ORDER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::MakeOrderRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NetworkRequest::Reader::isCancelOrderRequest() const {
  return which() == NetworkRequest::CANCEL_ORDER_REQUEST;
}
inline bool NetworkRequest::Builder::isCancelOrderRequest() {
  return which() == NetworkRequest::CANCEL_ORDER_REQUEST;
}
inline bool NetworkRequest::Reader::hasCancelOrderRequest() const {
  if (which() != NetworkRequest::CANCEL_ORDER_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NetworkRequest::Builder::hasCancelOrderRequest() {
  if (which() != NetworkRequest::CANCEL_ORDER_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CancelOrderRequest::Reader NetworkRequest::Reader::getCancelOrderRequest() const {
  KJ_IREQUIRE((which() == NetworkRequest::CANCEL_ORDER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CancelOrderRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CancelOrderRequest::Builder NetworkRequest::Builder::getCancelOrderRequest() {
  KJ_IREQUIRE((which() == NetworkRequest::CANCEL_ORDER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CancelOrderRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NetworkRequest::Builder::setCancelOrderRequest( ::CancelOrderRequest::Reader value) {
  _builder.setDataField<NetworkRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, NetworkRequest::CANCEL_ORDER_REQUEST);
  ::capnp::_::PointerHelpers< ::CancelOrderRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CancelOrderRequest::Builder NetworkRequest::Builder::initCancelOrderRequest() {
  _builder.setDataField<NetworkRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, NetworkRequest::CANCEL_ORDER_REQUEST);
  return ::capnp::_::PointerHelpers< ::CancelOrderRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NetworkRequest::Builder::adoptCancelOrderRequest(
    ::capnp::Orphan< ::CancelOrderRequest>&& value) {
  _builder.setDataField<NetworkRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, NetworkRequest::CANCEL_ORDER_REQUEST);
  ::capnp::_::PointerHelpers< ::CancelOrderRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CancelOrderRequest> NetworkRequest::Builder::disownCancelOrderRequest() {
  KJ_IREQUIRE((which() == NetworkRequest::CANCEL_ORDER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CancelOrderRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

