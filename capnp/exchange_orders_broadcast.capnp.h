// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: exchange_orders_broadcast.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1001000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(dbf5e2fabdc4a2b8);
CAPNP_DECLARE_SCHEMA(d2b19807bf57a53b);
CAPNP_DECLARE_SCHEMA(f590bba94ed71e26);
CAPNP_DECLARE_SCHEMA(db5096d070fbbd98);

}  // namespace schemas
}  // namespace capnp


struct BuyOrderPublic {
  BuyOrderPublic() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dbf5e2fabdc4a2b8, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SellOrderPublic {
  SellOrderPublic() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2b19807bf57a53b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StockIdOrderListsTuple {
  StockIdOrderListsTuple() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f590bba94ed71e26, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BroadcastStruct {
  BroadcastStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db5096d070fbbd98, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class BuyOrderPublic::Reader {
public:
  typedef BuyOrderPublic Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOrderAmount() const;

  inline  ::int32_t getUnitPriceCents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BuyOrderPublic::Builder {
public:
  typedef BuyOrderPublic Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOrderAmount();
  inline void setOrderAmount( ::int32_t value);

  inline  ::int32_t getUnitPriceCents();
  inline void setUnitPriceCents( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BuyOrderPublic::Pipeline {
public:
  typedef BuyOrderPublic Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SellOrderPublic::Reader {
public:
  typedef SellOrderPublic Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOrderAmount() const;

  inline  ::int32_t getUnitPriceCents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SellOrderPublic::Builder {
public:
  typedef SellOrderPublic Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getOrderAmount();
  inline void setOrderAmount( ::int32_t value);

  inline  ::int32_t getUnitPriceCents();
  inline void setUnitPriceCents( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SellOrderPublic::Pipeline {
public:
  typedef SellOrderPublic Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StockIdOrderListsTuple::Reader {
public:
  typedef StockIdOrderListsTuple Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStockId() const;
  inline  ::capnp::Text::Reader getStockId() const;

  inline bool hasBuyOrders() const;
  inline  ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Reader getBuyOrders() const;

  inline bool hasSellOrders() const;
  inline  ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Reader getSellOrders() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StockIdOrderListsTuple::Builder {
public:
  typedef StockIdOrderListsTuple Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStockId();
  inline  ::capnp::Text::Builder getStockId();
  inline void setStockId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStockId(unsigned int size);
  inline void adoptStockId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStockId();

  inline bool hasBuyOrders();
  inline  ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Builder getBuyOrders();
  inline void setBuyOrders( ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Builder initBuyOrders(unsigned int size);
  inline void adoptBuyOrders(::capnp::Orphan< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>> disownBuyOrders();

  inline bool hasSellOrders();
  inline  ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Builder getSellOrders();
  inline void setSellOrders( ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Builder initSellOrders(unsigned int size);
  inline void adoptSellOrders(::capnp::Orphan< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>> disownSellOrders();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StockIdOrderListsTuple::Pipeline {
public:
  typedef StockIdOrderListsTuple Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BroadcastStruct::Reader {
public:
  typedef BroadcastStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOrders() const;
  inline  ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Reader getOrders() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BroadcastStruct::Builder {
public:
  typedef BroadcastStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOrders();
  inline  ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Builder getOrders();
  inline void setOrders( ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Builder initOrders(unsigned int size);
  inline void adoptOrders(::capnp::Orphan< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>> disownOrders();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BroadcastStruct::Pipeline {
public:
  typedef BroadcastStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t BuyOrderPublic::Reader::getOrderAmount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t BuyOrderPublic::Builder::getOrderAmount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BuyOrderPublic::Builder::setOrderAmount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t BuyOrderPublic::Reader::getUnitPriceCents() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t BuyOrderPublic::Builder::getUnitPriceCents() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BuyOrderPublic::Builder::setUnitPriceCents( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SellOrderPublic::Reader::getOrderAmount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SellOrderPublic::Builder::getOrderAmount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SellOrderPublic::Builder::setOrderAmount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SellOrderPublic::Reader::getUnitPriceCents() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SellOrderPublic::Builder::getUnitPriceCents() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SellOrderPublic::Builder::setUnitPriceCents( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool StockIdOrderListsTuple::Reader::hasStockId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StockIdOrderListsTuple::Builder::hasStockId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StockIdOrderListsTuple::Reader::getStockId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StockIdOrderListsTuple::Builder::getStockId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StockIdOrderListsTuple::Builder::setStockId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StockIdOrderListsTuple::Builder::initStockId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StockIdOrderListsTuple::Builder::adoptStockId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StockIdOrderListsTuple::Builder::disownStockId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StockIdOrderListsTuple::Reader::hasBuyOrders() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StockIdOrderListsTuple::Builder::hasBuyOrders() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Reader StockIdOrderListsTuple::Reader::getBuyOrders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Builder StockIdOrderListsTuple::Builder::getBuyOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StockIdOrderListsTuple::Builder::setBuyOrders( ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>::Builder StockIdOrderListsTuple::Builder::initBuyOrders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void StockIdOrderListsTuple::Builder::adoptBuyOrders(
    ::capnp::Orphan< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>> StockIdOrderListsTuple::Builder::disownBuyOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BuyOrderPublic,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool StockIdOrderListsTuple::Reader::hasSellOrders() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool StockIdOrderListsTuple::Builder::hasSellOrders() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Reader StockIdOrderListsTuple::Reader::getSellOrders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Builder StockIdOrderListsTuple::Builder::getSellOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void StockIdOrderListsTuple::Builder::setSellOrders( ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>::Builder StockIdOrderListsTuple::Builder::initSellOrders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void StockIdOrderListsTuple::Builder::adoptSellOrders(
    ::capnp::Orphan< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>> StockIdOrderListsTuple::Builder::disownSellOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SellOrderPublic,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool BroadcastStruct::Reader::hasOrders() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BroadcastStruct::Builder::hasOrders() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Reader BroadcastStruct::Reader::getOrders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Builder BroadcastStruct::Builder::getOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BroadcastStruct::Builder::setOrders( ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>::Builder BroadcastStruct::Builder::initOrders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BroadcastStruct::Builder::adoptOrders(
    ::capnp::Orphan< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>> BroadcastStruct::Builder::disownOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StockIdOrderListsTuple,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

